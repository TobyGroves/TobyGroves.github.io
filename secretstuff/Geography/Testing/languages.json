[
    {
        "language": "SquigglyPi",
        "minimalStructure": "CODE GOES HERE",
        "standardConsoleOutput": "$<-\"Hello World\"\\",
        "integerDeclaration": "<i:integerName|0>",
        "floatingPointDeclarationdoubleOrDecimal": "<r:floatName|0>",
        "stringDeclaration": "<s:stringName|\"\">",
        "singleLineIf": "<?...|CODE>",
        "multiLineIf": "<?...|CODE|?...|CODE|?|CODE>",
        "switch": "<^x|^1|...|^2|...|^|...>",
        "whileLoop": "<&...|CODE>",
        "forLoop": "<+0..10->i|CODE>",
        "enhancedForLoop": "<+collection->x|CODE>",
        "createAndInitializeAList": "<[i]:list|1,2,3>",
        "createAndInitializeAMap": "<[s,i]:map|\"a\":1,\"b\":2,\"c\":3>",
        "stringConcatination": "string1;string2",
        "functionDeclarationNonlambda": "<~i:addOne<-i:x|<\\x+1>>",
        "defineAClass": "<@ClassName|...>",
        "extendAClass": "<@ClassName<-SuperClass|...>",
        "constructor": "<~@|...>",
        "privatePropertyWithGetSet": "<.i:variable><~i:getVariable|<\\i>>     <~setVariable<-variable|variable->~variable>"
    },
    {
        "language": "Java",
        "minimalStructure": "public class ClassName {\npublic static void main(String[] args) {\nCODE GOES HERE\n}\n}",
        "standardConsoleOutput": "System.out.println(&ldquo;Hello, world!&rdquo;);",
        "integerDeclaration": "int integerName = 0;",
        "floatingPointDeclarationdoubleOrDecimal": "double floatName = 0;",
        "stringDeclaration": "String stringName = \"\";",
        "singleLineIf": "if (...)CODE;",
        "multiLineIf": "if (...) {\nCODE GOES HERE\n} else if (...) {\nCODE GOES HERE\n}else {\nCODE GOES HERE\n}",
        "switch": "switch (x) {\ncase 1: CODE GOES HERE; break;\ncase 2: CODE GOES HERE; break;\ndefault: CODE GOES HERE;\n}",
        "whileLoop": "while (...) {\nCODE GOES HERE\n}",
        "forLoop": "for (int i = 0; i < 10; i++) {\nCODE GOES HERE\n}",
        "enhancedForLoop": "for (Object x : collection) {\nCODE GOES HERE\n}",
        "createAndInitializeAnArray": "int[] arrayName;\narrayName = {...};",
        "createAndInitializeAList": "ArrayList<Integer> list = new ArrayList<>();\nlist.add(1);\nlist.add(2);\nlist.add(3);",
        "createAndInitializeAMap": "HashMap<String, Integer> map = new HashMap<>();\nmap.add(\"a\", 1);\nmap.add(\"b\", 2);\nmap.add(\"c\", 3);",
        "stringConcatination": "string1 + string2",
        "functionDeclarationNonlambda": "int addOne(int x) {\nreturn x + 1;\n}",
        "lambdaExpressionsOrFunctionalInterface": "NOT FIRST CLASS OBJECTS",
        "defineAClass": "public class ClassName {\n\n}",
        "extendAClass": "public class ClassName extends SuperClass {\n\n}",
        "constructor": "public ClassName() {\n\n}",
        "privatePropertyWithGetSet": "private int variable;\npublic void setVariable(int variable){\n    this.variable=variable;\n}\npublic int getVariable(){\n    return variable;\n}",
        "method": "public void doAThing() {\n    CODE GOES HERE\n}"
    },
    {
        "language": "C++",
        "minimalStructure": "#include <iostream>\nusing namespace std;\nint main() {\nCODE GOES HERE\nreturn 0;\n}",
        "standardConsoleOutput": "cout << &ldquo;Hello, world!&rdquo; << endl;",
        "integerDeclaration": "int integerName = 0;",
        "floatingPointDeclarationdoubleOrDecimal": "double floatName = 0;",
        "stringDeclaration": "string stringName = \"\";",
        "singleLineIf": "SAME AS JAVA",
        "multiLineIf": "SAME AS JAVA",
        "whileLoop": "SAME AS JAVA",
        "forLoop": "SAME AS JAVA",
        "enhancedForLoop": "for (auto x : collection) {\nCODE GOES HERE\n}",
        "createAndInitializeAnArray": "intarrayName [] = { 1, 2, 3 };",
        "stringConcatination": "SAME AS JAVA",
        "defineAClass": "class ClassName {\n\n};"
    },
    {
        "language": "Python",
        "minimalStructure": "CODE GOES HERE",
        "standardConsoleOutput": "print(\"Hello, world!\")",
        "integerDeclaration": "integerName = 0",
        "floatingPointDeclarationdoubleOrDecimal": "floatName= 0.0",
        "stringDeclaration": "stringName = \"\"",
        "singleLineIf": "if ...:CODE",
        "multiLineIf": "if ... :\n    CODE GOES HERE\nelif ... :\n    CODE GOES HERE\nelse:\n    CODE GOES HERE",
        "switch": "if x==1:\n    CODE GOES HERE\nelif x==2:\n    CODE GOES HERE\nelse:\n    CODE GOES HERE",
        "whileLoop": "while ... :\n    CODE GOES HERE",
        "forLoop": "for i in range(0, 10):\n    CODE GOES HERE",
        "enhancedForLoop": "for x in collection:\n    CODE GOES HERE",
        "createAndInitializeAnArray": "arrayName = [1, 2, 3]",
        "createAndInitializeAList": "list = [1, 2, 3]",
        "createAndInitializeAMap": "map = {\"a\":1, \"b\":2, \"c\":3}",
        "stringConcatination": "SAME AS JAVA",
        "functionDeclarationNonlambda": "def addOne(x):\nreturn x+1",
        "lambdaExpressionsOrFunctionalInterface": "g = lambda x: x+1",
        "defineAClass": "class ClassName:",
        "extendAClass": "class ClassName(SuperClass):",
        "constructor": "__init__(self):",
        "privatePropertyWithGetSet": "__variable\nsetVariable(variable):\n__variable=newVar\ngetVariable():\nreturn __variable"
    },
    {
        "language": "C#",
        "minimalStructure": "using System;\npublic class ClassName {\npublic static void Main() {\nCODE GOES HERE\n}\n}",
        "standardConsoleOutput": "Console.WriteLine(\"Hello, world!\");",
        "integerDeclaration": "int integerName = 0;",
        "floatingPointDeclarationdoubleOrDecimal": "double floatName = 0;",
        "stringDeclaration": "string stringName = \"\";",
        "singleLineIf": "SAME AS JAVA",
        "multiLineIf": "SAME AS JAVA",
        "switch": "switch (x) {\ncase 1: CODE GOES HERE; break;\ncase 2: CODE GOES HERE; break;\ndefault: CODE GOES HERE; break;\n}",
        "whileLoop": "SAME AS JAVA",
        "forLoop": "SAME AS JAVA",
        "enhancedForLoop": "foreach (var x in collection) {\nCODE GOES HERE\n}",
        "createAndInitializeAnArray": "int[] arrayName = new int[5]{ .., .., .., .., .., };",
        "stringConcatination": "SAME AS JAVA",
        "defineAClass": "SAME AS JAVA"
    },
    {
        "language": "Scala",
        "minimalStructure": "object ObjectName {\ndef main(args: Array[String]): Unit = {\nCODE GOES HERE\n}\n}",
        "standardConsoleOutput": "println(\"Hello, world!\");",
        "integerDeclaration": "var integerName = 0;\n\nSTRICT\nvar integerName: Int = 0;",
        "floatingPointDeclarationdoubleOrDecimal": "var floatName = 0.0;\n\nSTRICT\nvar floatName: Double= 0.0;",
        "stringDeclaration": "var stringName = \"\";\n\nSTRICT\nvar stringName: String = \"\";",
        "singleLineIf": "SAME AS JAVA",
        "multiLineIf": "SAME AS JAVA",
        "whileLoop": "SAME AS JAVA",
        "forLoop": "for(var x <- 0 to 9) {\nCODE GOES HERE\n}",
        "enhancedForLoop": "for(var x <-collection) {\nCODE GOES HERE\n}",
        "stringConcatination": "SAME AS JAVA"
    },
    {
        "language": "Groovy",
        "minimalStructure": "CODE GOES HERE",
        "standardConsoleOutput": "println \"Hello, world!\"",
        "integerDeclaration": "def integerName = 0\n\nSTRICT\nint integerName = 0",
        "floatingPointDeclarationdoubleOrDecimal": "def floatName = 0.0\n\nSTRICT\ndouble floatName = 0.0",
        "stringDeclaration": "def stringName = ''\n\nSTRICT\nstring stringName = ''",
        "singleLineIf": "SAME AS JAVA",
        "multiLineIf": "SAME AS JAVA",
        "whileLoop": "SAME AS JAVA",
        "forLoop": "SAME AS JAVA",
        "enhancedForLoop": "collection.each {\nCODE GOES HERE\n}",
        "createAndInitializeAnArray": "SAME AS JAVA",
        "createAndInitializeAList": "def list = [1, 2, 3]",
        "createAndInitializeAMap": "def map = [a:1, b:2, c:3]",
        "stringConcatination": "SAME AS JAVA",
        "functionDeclarationNonlambda": "def addOne(x) { x + 1 }",
        "lambdaExpressionsOrFunctionalInterface": "def addOne = { x -> x + 1 }",
        "defineAClass": "SAME AS JAVA"
    },
    {
        "language": "JavaScript / ECMAScript",
        "minimalStructure": "CODE GOES HERE",
        "standardConsoleOutput": "console.log(\"Hello, world!\")",
        "integerDeclaration": "integerName = 0;",
        "floatingPointDeclarationdoubleOrDecimal": "floatName = 0.0;",
        "stringDeclaration": "stringName = '';",
        "singleLineIf": "SAME AS JAVA",
        "multiLineIf": "SAME AS JAVA",
        "whileLoop": "SAME AS JAVA",
        "forLoop": "SAME AS JAVA",
        "enhancedForLoop": "for (x in collection) {\nCODE GOES HERE\n}",
        "createAndInitializeAnArray": "var arrayName = [.....];\nvar arrayName = new Array(.....);",
        "stringConcatination": "SAME AS JAVA"
    },
    {
        "language": "CoffeeScript",
        "minimalStructure": "CODE GOES HERE",
        "standardConsoleOutput": "console.log \"Hello, world!\"",
        "integerDeclaration": "integerName = 0",
        "floatingPointDeclarationdoubleOrDecimal": "floatName = 0.0",
        "stringDeclaration": "stringName = \"\"",
        "singleLineIf": "CODEif ...",
        "multiLineIf": "if ... CODE GOES HEREelse if ... CODE GOES HEREelse CODE GOES HERE",
        "stringConcatination": "SAME AS JAVA"
    },
    {
        "language": "PHP",
        "minimalStructure": "<?php\nCODE GOES HERE\n>",
        "standardConsoleOutput": "echo \"Hello, world!\\n\"",
        "integerDeclaration": "$integerName = 0;",
        "floatingPointDeclarationdoubleOrDecimal": "$floatName = 0.0;",
        "stringDeclaration": "$stringName = \"\";",
        "singleLineIf": "SAME AS JAVA",
        "multiLineIf": "if (...) {\n    CODE GOES HERE\n} elseif (...) {\n    CODE GOES HERE\n} else (...) {\n    CODE GOES HERE\n}",
        "whileLoop": "SAME AS JAVA",
        "stringConcatination": "$string1.$string2"
    },
    {
        "language": "Perl",
        "minimalStructure": "#!/bin/usr/Perl\nuse strict; (technically optional but reccomended)\nuse warnings; (technically optional but reccomended)\nCODE GOES HERE\n",
        "standardConsoleOutput": "print \"Hello, world!\\n\";",
        "integerDeclaration": "$integerName = 1;",
        "floatingPointDeclarationdoubleOrDecimal": "$floatName = 3.141592;",
        "stringDeclaration": "$stringName = \"Fred\";",
        "singleLineIf": "CODEif ...;",
        "multiLineIf": "if (...) {\n    CODE GOES HERE\n} elif (...) {\n    CODE GOES HERE\n} else (...) {\n    CODE GOES HERE\n}",
        "whileLoop": "SAME AS JAVA"
    },
    {
        "language": "Ruby",
        "minimalStructure": "CODE GOES HERE",
        "standardConsoleOutput": "puts 'Hello, world!'",
        "integerDeclaration": "integerName = 0",
        "floatingPointDeclarationdoubleOrDecimal": "floatName = 0.0",
        "stringDeclaration": "stringName = ''",
        "singleLineIf": "CODEif ...",
        "multiLineIf": "if ...\n    CODE GOES HERE\nelsif ...\n    CODE GOES HERE\nelse ...\n    CODE GOES HERE\nend",
        "whileLoop": "while ... do\nCODE GOES HERE\nend"
    },
    {
        "language": "Swift",
        "minimalStructure": "CODE GOES HERE",
        "standardConsoleOutput": "print(\"Hello, World!\")",
        "integerDeclaration": "var integerName = 0",
        "floatingPointDeclarationdoubleOrDecimal": "var floatName = 0.0",
        "stringDeclaration": "var stringName: String = \"\";",
        "singleLineIf": "if ... {CODE}",
        "multiLineIf": "if ... {\n    CODE GOES HERE\n} else if ... {\n    CODE GOES HERE\n} else {\n    CODE GOES HERE\n}",
        "whileLoop": "while ... {\nCODE GOES HERE\n}",
        "stringConcatination": "SAME AS JAVA"
    }
]
